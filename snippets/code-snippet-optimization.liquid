
{% if template %}
    {% case template | json %}
        {% when 'index' %}
        {% when 'product.pf-b10ddb73' %}
        {% when 'page.pf-3b2bc3c4' %}
        {% when 'page.jobrad' %}
        {% else %}
            <script src="https://cdn.shopify.com/s/files/1/0583/5810/4213/files/1.14.2-TweenMax.js?v=1663912518"></script>
            <script src="https://cdn.shopify.com/s/files/1/0583/5810/4213/files/2.0.3-ScrollMagic.min.js?v=1663912592"></script>
            <script src="https://cdn.shopify.com/s/files/1/0583/5810/4213/files/2.0.3-animation.gsap.js?v=1663912682"></script>
            <script src="https://cdn.shopify.com/s/files/1/0583/5810/4213/files/2.0.3-debug.addIndicators.js?v=1663912891"></script>
    {% endcase %}
{% else %}
{% endif %}



<script src="https://cdn.shopify.com/s/files/1/0583/5810/4213/files/1.9.1-jquery.min.js?v=1663911504"></script>
<script src="https://cdn.shopify.com/s/files/1/0583/5810/4213/files/8-swiper-bundle.min.js?v=1663912984"></script>
<script>
    // 当前页面id
const current_page_id = '{{ template }}'
console.log('current_page_id:', current_page_id);

// 立即执行
(w => {
    const falg = w.sessionStorage.carbon_one_a_b_test_flag

    if (falg) {
        return flag
    }

    // carbon 车 A/B TEST ,出现50% 的概率
    w.sessionStorage.carbon_one_a_b_test_flag = Math.round(Math.random()) === 1 ? 'A' : 'B'
})(window);

// isSendBeacon 是否使用 sendBeacon api 保证页面退出时提交后端数据
function fetchBuried (name = '', type = '', data = {}, isSendBeacon = false) {
    
    const body = {
        module: "website-de",
        trace_name: `${name}-de`,
        trace_type: `${type}-${document.body.clientWidth > 768 ? 'pc' : 'mb'}`,
        extras: data
    }

    return isSendBeacon ? navigator.sendBeacon('https://api.newurtopia.com/third_part/traces', JSON.stringify(body)) : fetch("https://api.newurtopia.com/third_part/traces", {
        method: "POST",
        body: JSON.stringify(body),
        headers: {
            "Content-Type": "application/json",
        },
    })
}

// 查询url 参数
function getSearchValues () {
    const search = {}

    // 页面url
    const url = new URL(location.href)

    for (const [k, v] of url.searchParams.entries()) {
        search[k] = v
    }

    return search
}


function debounce(fn, wait) {
    // 自由变量，debounce执行完成被释放，time也不会被释放
    let time;
    // 返回一个闭包，接受参数
    return function (...args) {
        // 保存闭包被调用时的this
        const this_ = this;
        // 清除上一次的定时器
        if (time) {
            clearTimeout(time);
        };
        // 不再是直接执行fn，在内部传递参数
        time = setTimeout(function () {
            // 通过apply修改fn的this
            fn.apply(this_, args);
        }, wait);
    }
};


 // 视频播放
 function showVideoDialog (src = '') {
    console.log('src', src)
    if (!src) {
        return
    }
    const template = `<div class="video-box">
        <iframe
            width="${document.body.clientWidth > 768 ? 840 : document.body.clientWidth * 0.84 }"
            height="${document.body.clientWidth > 768 ? 472 : 'auto'}"
            src="${src}"
            title="YouTube video player"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen
        ></iframe>
        <span class="close" onclick="closeMiniDialog()">x</span>
    </div>`
    showMiniDialog(template)
 }

    function showMiniDialog(html = '') {
        $('body .mini-dialog').remove()
        setTimeout(() => {
            $("body").append(`<div class="mini-dialog" style="display: flex;">${html}</div>`)
        
            {% comment %} setTimeout(() => {
            $('body .mini-dialog > div').on('click', e => {
                e.stopPropagation();
                return false;
            })
            }, 100) {% endcomment %}
        })
    }
    
    function closeMiniDialog() {
        // console.log(a === document.querySelector('body .mini-dialog'))
        $('body .mini-dialog').remove()
    }  

class MyStorage {
    constructor(props) {
      this.props = props || {};
      this.source = this.props.source || window.localStorage;
      this.initrun();
    }
    initrun() {
      /*
       * set 存储方法
       * @ param {string} key 键
       * @ param {string} value 值，存储的值可能是数组/对象，不能直接存储，需要转换 json.stringify
       * @ param {string} expired 过期时间，以分钟为单位
       * @ 由@it·平头哥联盟-首席填坑官∙苏南 分享
       */
      const reg = new RegExp('__expires__');
      let data = this.source;
      let list = Object.keys(data);
      if (list.length > 0) {
        list.map((key, v) => {
          if (!reg.test(key)) {
            let now = Date.now();
            let expires = data[`${key}__expires__`] || Date.now() + 1;
            if (now >= expires) {
              this.remove(key);
            }
          }
          return key;
        });
      }
    }

    set(key, value, expired = 3) {
      /*
      * set 存储方法
      * @ param {string} key 键
      * @ param {string} value 值，
      * @ param {string} expired 过期时间，以分钟为单位，非必须
      * @ 由@it·平头哥联盟-首席填坑官∙苏南 分享
      */
      let source = this.source;
      source[key] = JSON.stringify(value);
      if (expired){
      source[`${key}__expires__`] = Date.now() + 1000 * 60 * 60 * 24 * expired
      };
      return value;
     }

    get(key) {
      /*
      * get 获取方法
      * @ param {string} key 键
      * @ param {string} expired 存储时为非必须字段，所以有可能取不到，默认为 date.now+1
      * @ 由@it·平头哥联盟-首席填坑官∙苏南 分享
      */
      const source = this.source,
      expired = source[`${key}__expires__`]||Date.now()+1;
      const now = Date.now();
      
      if ( now >= expired ) {
      this.remove(key);
      return;
      }
      const value = source[key] ? JSON.parse(source[key]) : source[key];
      return value;
     }

    remove(key) {
      const data = this.source,
      value = data[key];
      delete data[key];
      delete data[`${key}__expires__`];
      return value;
     }
  }
/*! lozad.js - v1.0.8 - 2017-10-13
* https://github.com/ApoorvSaxena/lozad.js
* Copyright (c) 2017 Apoorv Saxena; Licensed MIT */
!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : t.lozad = e()
}(this, function() {
    "use strict";
    function t(t) {
        t.setAttribute("data-loaded", !0)
    }
    var e = Object.assign || function(t) {
        for (var e = 1; e < arguments.length; e++) {
            var r = arguments[e];
            for (var o in r)
                Object.prototype.hasOwnProperty.call(r, o) && (t[o] = r[o])
        }
        return t
    }
      , r = {
        rootMargin: "0px",
        threshold: 0,
        load: function(t) {
            t.getAttribute("data-src") && (t.src = t.getAttribute("data-src")),
            t.getAttribute("data-srcset") && (t.srcset = t.getAttribute("data-srcset")),
            t.getAttribute("data-background-image") && (t.style.backgroundImage = "url(" + t.getAttribute("data-background-image") + ")")
        }
    }
      , o = function(t) {
        return "true" === t.getAttribute("data-loaded")
    }
      , n = function(e) {
        return function(r, n) {
            r.forEach(function(r) {
                r.intersectionRatio > 0 && (n.unobserve(r.target),
                o(r.target) || (e(r.target),
                t(r.target)))
            })
        }
    };
    return function() {
        var a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ".lozad"
          , i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
          , u = e({}, r, i)
          , d = u.rootMargin
          , c = u.threshold
          , s = u.load
          , g = void 0;
        return window.IntersectionObserver && (g = new IntersectionObserver(n(s),{
            rootMargin: d,
            threshold: c
        })),
        {
            observe: function() {
                for (var e = document.querySelectorAll(a), r = 0; r < e.length; r++)
                    o(e[r]) || (g ? g.observe(e[r]) : (s(e[r]),
                    t(e[r])))
            },
            triggerLoad: function(e) {
                o(e) || (s(e),
                t(e))
            }
        }
    }
});
</script>

